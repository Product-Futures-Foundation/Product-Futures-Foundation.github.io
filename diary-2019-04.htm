<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">

<head>
  <title>diary-2019-04</title>
  <link href=".src/preferred.css" rel="stylesheet" type="text/css"/>
</head>

<body>
<p class='header'>
 <a href="-home.htm">Home</a> | <a href="-diary.htm">Diary</a> | <a href="-todo.htm">Todo</a> | <a href="-index.htm">Index</a> | <a href="-about.htm">About</a> |</p>
<p class='main'><hr/><span class="date">2019-04-30:</span><br/>
<span class="quot2">"'Beginning with the grant of Mary<a href="land.htm">land</a> in 1632, and including those of Maine, the Carolinas, and Pennsylvania, the proprietary charters expressly transferred the right of the cr<a href="own.htm">own</a> to re<a href="serv.htm">serv</a>e a <a href="rent.htm">rent</a>.<br/>
<br/>
Also, by waiving the statute Quia Emptores, they <a href="perm.htm">perm</a>itted subin<a href="feud.htm">feud</a>ation.<br/>
<br/>
Quit- <a href="rent.htm">rent</a>s<a href="we.htm"> we</a>re mentioned in the grants to the Duke of York, and still later, in the charter of Ge<a href="org.htm">org</a>ia, by the re<a href="serv.htm">serv</a>ation of a <a href="rent.htm">rent</a> of 4 shillings per 1OO acres.<br/>
<br/>
The theory that the cr<a href="own.htm">own</a> held a <a href="feud.htm">feud</a>al <a href="own.htm">own</a>ership in the soil of new possessions was not confined to the thirteen American colonies.<br/>
<br/>
In the grant of Newfound<a href="land.htm">land</a> in 1637 to the Marquis of Hamilton and his associates a proprietary <a href="control.htm">control</a>, involving a quit-<a href="rent.htm">rent</a>, was <a href="creat.htm">creat</a>ed.<br/>
<br/>
A further extension of the <a href="feud.htm">feud</a>al theory of <a href="land.htm">land</a>-tenure was made when the proclamation of 1763, which framed the <a href="gov.htm">gov</a>ern- ments of Quebec, East and<a href="we.htm"> We</a>st Florida, and Grenada, provided for a quit-<a href="rent.htm">rent</a> system as a sign of the royal supremacy.<br/>
<br/>
A similar policy was ob<a href="serv.htm">serv</a>ed in the British<a href="we.htm"> We</a>st Indies, where the <a href="land.htm">land</a> was granted to proprietors who coll<a href="ect.htm">ect</a>ed quit-<a href="rent.htm">rent</a>s, or else bore a quit- <a href="rent.htm">rent</a> charge <a href="pay.htm">pay</a>able dir<a href="ect.htm">ect</a>ly to the cr<a href="own.htm">own</a>.'"</span> -- <small>[<small>[The Quit-<a href="rent.htm">Rent</a> System in the American Colonies <a class="ext" href="https://Jstor.org/stable/pdf/1834386.pdf">Jstor.org/stable/pdf/1834386.pdf</a>]</small>]</small><br/>
<br/>
<hr/><span class="date">2019-04-30:</span> <a class="ext" href="https://OneCommunityGlobal.org/aquapini-and-walipini-planting-and-harvesting">OneCommunityGlobal.org/aquapini-and-walipini-planting-and-harvesting</a><br/>
<br/>
<hr/><span class="date">2019-04-30:</span> Climate Reality Leadership Corps<br/>
<br/>
<hr/><span class="date">2019-04-29:</span> <a class="ext" href="https://OneCommunityGlobal.org/revenue">OneCommunityGlobal.org/revenue</a> <span class="quot2">>><a href="creat.htm">Creat</a>ing s<a href="us.htm">us</a>tainable and duplicable financial successTourism revenue has <a href="bee.htm">bee</a>n identified as the revenue stream most capable of accomplishing our global transformation <a href="goal.htm">goal</a>s by further supporting and <a href="shar.htm">shar</a>ing One Community as a teacher/demonstration community, village, and <a href="city.htm">city</a>.<a href="we.htm"> We </a>will<a href="us.htm"> us</a>e a combination of the visitability of our location, educational classes, and non-stop <a href="creat.htm">creat</a>ion of <a href="open.htm">open</a> <a href="sourc.htm">sourc</a>e blueprints to market and <a href="shar.htm">shar</a>e this option with the world. S<a href="us.htm">us</a>tainable infra<a href="struc.htm">struc</a>ture combined with an all volunteer <a href="labor.htm">labor</a> force will keep operational expenses low while<a href="we.htm"> we </a><a href="shar.htm">shar</a>e the fulfilled living and enriching environment as a marketable eco-tourism option. This will allow<a href="us.htm"> us </a>to offer significantly more <a href="valu.htm">valu</a>e, for a lo<a href="we.htm">we</a>r <a href="pric.htm">pric</a>e, with an endless and <a href="free.htm">free</a> <a href="open.htm">open</a> <a href="sourc.htm">sourc</a>e <a href="shar.htm">shar</a>ing marketing engine that benefits<a href="us.htm"> us </a>and the world. In short, the more <small>(and higher quality)</small> our <a href="open.htm">open</a> <a href="sourc.htm">sourc</a>e <a href="shar.htm">shar</a>ing, and the more fun our environment is, the more successful<a href="we.htm"> we </a>will be; all of which will help to fuel our s<a href="econ.htm">econ</a>dary revenue streams as<a href="we.htm"> we</a>ll.</span><br/>
<br/>
<hr/><span class="date">2019-04-27:</span> <a class="ext" href="https://Github.com/ethereum/serpent">Github.com/ethereum/serpent</a> <span class="quot2">>>Serpent is an assembly language that compiles to EVM <a href="code.htm">code</a> that is extended with vario<a href="us.htm">us </a>high-level features. It can be<a href="us.htm"> us</a>eful for writing <a href="code.htm">code</a> that requires low-level op<a href="code.htm">code</a> manipulation as<a href="we.htm"> we</a>ll as access to high-level primitives like the ABI.</span><br/>
<br/>
<hr/><span class="date">2019-04-27:</span> <a class="ext" href="https://Vyper.ReadTheDocs.io">Vyper.ReadTheDocs.io</a> <span class="quot2">>> Vyper <a href="code.htm">code</a> should be maximally human-readable. Furthermore, it should be maximally difficult to write misleading <a href="code.htm">code</a>. Simpli<a href="city.htm">city</a> for the reader is more important than simpli<a href="city.htm">city</a> for the writer, and simpli<a href="city.htm">city</a> for readers with low prior experience with Vyper <small>(and low prior experience with programming in general)</small> is particularly important.</span><br/>
<br/>
<hr/><span class="date">2019-04-27:</span><br/>
<a class="ext" href="https://Ethereum.org/token">Ethereum.org/token</a><br/>
<br/>
<span class="quot2">>> <a href="contract.htm">Contract</a>s aren't able to subscribe to Events only to function calls. So for <a href="contract.htm">contract</a>s, you should first approve an amount of <a href="token.htm">token</a>s they can move from your account and then ping them to let them know they should do their thing - or do the two actions in one, with approveAndCall.</span><br/>
<br/>
<span class="quot2">>> Note <a href="buy.htm">Buy</a> and <a href="sell.htm">sell</a> "<a href="pric.htm">pric</a>es" are not set in Ether, but in<a href="we.htm"> we</a>i the minimum currency of the system <small>(equivalent to the cent in the Euro and Dollar, or the Satoshi in Bit<a href="coin.htm">coin</a>)</small>. One Ether is 1000000000000000000<a href="we.htm"> we</a>i. So when setting <a href="pric.htm">pric</a>es for your <a href="token.htm">token</a> in Ether, add 18 zeros at the end.</span><br/>
<br/>
<small>{<br/>
<span class="cmnt">// Advanced <a href="token.htm">Token</a></span><br/>
<br/>
pragma <a href="solidity.htm">solidity</a> >=0.4.22 &lt;0.6.0;<br/>
<br/>
<a href="contract.htm">contract</a> <a href="own.htm">own</a>ed <small>{<br/>
&nbsp;&nbsp;&nbsp; ad<a href="dress.htm">dress</a> public <a href="own.htm">own</a>er;<br/>
<br/>
&nbsp;&nbsp;&nbsp; con<a href="struc.htm">struc</a>tor<small>()</small> public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="own.htm">own</a>er = <a class="ext" href="https://msg.sender">msg.sender</a>;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; <a href="mod.htm">mod</a>ifier only<a href="own.htm">Own</a>er <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(<a class="ext" href="https://msg.sender">msg.sender</a> == <a href="own.htm">own</a>er)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; function transfer<a href="own.htm">Own</a>ership<small>(ad<a href="dress.htm">dress</a> new<a href="own.htm">Own</a>er)</small> only<a href="own.htm">Own</a>er public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="own.htm">own</a>er = new<a href="own.htm">Own</a>er;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
}</small><br/>
<br/>
interface <a href="token.htm">token</a>Recipient <small>{ function receiveApproval<small>(ad<a href="dress.htm">dress</a> _from, uint256 _<a href="valu.htm">valu</a>e, ad<a href="dress.htm">dress</a> _<a href="token.htm">token</a>, bytes calldata _ex<a href="trad.htm">traD</a>ata)</small> external; }</small><br/>
<br/>
<a href="contract.htm">contract</a> <a href="token.htm">Token</a>ERC20 <small>{<br/>
&nbsp;&nbsp;&nbsp; // Public variables of the <a href="token.htm">token</a><br/>
&nbsp;&nbsp;&nbsp; string public name;<br/>
&nbsp;&nbsp;&nbsp; string public symbol;<br/>
&nbsp;&nbsp;&nbsp; uint8 public decimals = 18;<br/>
&nbsp;&nbsp;&nbsp; // 18 decimals is the strongly suggested default, avoid <a href="chang.htm">chang</a>ing it<br/>
&nbsp;&nbsp;&nbsp; uint256 public totalSupply;<br/>
<br/>
&nbsp;&nbsp;&nbsp; // This <a href="creat.htm">creat</a>es an array with all balances<br/>
&nbsp;&nbsp;&nbsp; mapping <small>(ad<a href="dress.htm">dress</a> => uint256)</small> public balanceOf;<br/>
&nbsp;&nbsp;&nbsp; mapping <small>(ad<a href="dress.htm">dress</a> => mapping <small>(ad<a href="dress.htm">dress</a> => uint256)</small>)</small> public allowance;<br/>
<br/>
&nbsp;&nbsp;&nbsp; // This generates a public event on the <a href="bloc.htm">bloc</a>kchain that will notify clients<br/>
&nbsp;&nbsp;&nbsp; event Transfer<small>(ad<a href="dress.htm">dress</a> indexed from, ad<a href="dress.htm">dress</a> indexed to, uint256 <a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp; <br/>
&nbsp;&nbsp;&nbsp; // This generates a public event on the <a href="bloc.htm">bloc</a>kchain that will notify clients<br/>
&nbsp;&nbsp;&nbsp; event Approval<small>(ad<a href="dress.htm">dress</a> indexed _<a href="own.htm">own</a>er, ad<a href="dress.htm">dress</a> indexed _spender, uint256 _<a href="valu.htm">valu</a>e)</small>;<br/>
<br/>
&nbsp;&nbsp;&nbsp; // This notifies clients about the amount burnt<br/>
&nbsp;&nbsp;&nbsp; event Burn<small>(ad<a href="dress.htm">dress</a> indexed from, uint256 <a href="valu.htm">valu</a>e)</small>;<br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Constrctor function<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Initializes <a href="contract.htm">contract</a> with initial supply <a href="token.htm">token</a>s to the <a href="creat.htm">creat</a>or of the <a href="contract.htm">contract</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; con<a href="struc.htm">struc</a>tor<small>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint256 initialSupply,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string memory <a href="token.htm">token</a>Name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string memory <a href="token.htm">token</a>Symbol<br/>
&nbsp;&nbsp;&nbsp; )</small> public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; totalSupply = initialSupply * 10 ** uint256<small>(decimals)</small>;&nbsp;&nbsp;// Update total supply with the decimal amount<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small> = totalSupply;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Give the <a href="creat.htm">creat</a>or all initial <a href="token.htm">token</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; name = <a href="token.htm">token</a>Name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the name for dis<a href="play.htm">play</a> purposes<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; symbol = <a href="token.htm">token</a>Symbol;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Set the symbol for dis<a href="play.htm">play</a> purposes<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Internal transfer, only can be called by this <a href="contract.htm">contract</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function _transfer<small>(ad<a href="dress.htm">dress</a> _from, ad<a href="dress.htm">dress</a> _to, uint _<a href="valu.htm">valu</a>e)</small> internal <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Prevent transfer to 0x0 ad<a href="dress.htm">dress</a>.<a href="us.htm"> Us</a>e burn<small>()</small> instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(_to != ad<a href="dress.htm">dress</a><small>(0x0)</small>)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check if the sender has enough<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(balanceOf<small>[_from]</small> >= _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check for overflows<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(balanceOf<small>[_to]</small> + _<a href="valu.htm">valu</a>e > balanceOf<small>[_to]</small>)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Save this for an assertion in the <a href="future.htm">future</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint previo<a href="us.htm">us</a>Balances = balanceOf<small>[_from]</small> + balanceOf<small>[_to]</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Subtract from the sender<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[_from]</small> -= _<a href="valu.htm">valu</a>e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the same to the recipient<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[_to]</small> += _<a href="valu.htm">valu</a>e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Transfer<small>(_from, _to, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Asserts are<a href="us.htm"> us</a>ed to<a href="us.htm"> us</a>e static analysis to find bugs in your <a href="code.htm">code</a>. They should never fail<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; assert<small>(balanceOf<small>[_from]</small> + balanceOf<small>[_to]</small> == previo<a href="us.htm">us</a>Balances)</small>;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Transfer <a href="token.htm">token</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Send `_<a href="valu.htm">valu</a>e` <a href="token.htm">token</a>s to `_to` from your account<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _to The ad<a href="dress.htm">dress</a> of the recipient<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _<a href="valu.htm">valu</a>e the amount to send<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function transfer<small>(ad<a href="dress.htm">dress</a> _to, uint256 _<a href="valu.htm">valu</a>e)</small> public returns <small>(bool success)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _transfer<small>(<a class="ext" href="https://msg.sender">msg.sender</a>, _to, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Transfer <a href="token.htm">token</a>s from other ad<a href="dress.htm">dress</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Send `_<a href="valu.htm">valu</a>e` <a href="token.htm">token</a>s to `_to` in behalf of `_from`<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _from The ad<a href="dress.htm">dress</a> of the sender<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _to The ad<a href="dress.htm">dress</a> of the recipient<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _<a href="valu.htm">valu</a>e the amount to send<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function transferFrom<small>(ad<a href="dress.htm">dress</a> _from, ad<a href="dress.htm">dress</a> _to, uint256 _<a href="valu.htm">valu</a>e)</small> public returns <small>(bool success)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(_<a href="valu.htm">valu</a>e &lt;= allowance<small>[_from]</small><small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small>)</small>;&nbsp;&nbsp;&nbsp;&nbsp; // Check allowance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; allowance<small>[_from]</small><small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small> -= _<a href="valu.htm">valu</a>e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _transfer<small>(_from, _to, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Set allowance for other ad<a href="dress.htm">dress</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Allows `_spender` to spend no more than `_<a href="valu.htm">valu</a>e` <a href="token.htm">token</a>s in your behalf<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _spender The ad<a href="dress.htm">dress</a> authorized to spend<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _<a href="valu.htm">valu</a>e the max amount they can spend<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function approve<small>(ad<a href="dress.htm">dress</a> _spender, uint256 _<a href="valu.htm">valu</a>e)</small> public<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returns <small>(bool success)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; allowance<small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small><small>[_spender]</small> = _<a href="valu.htm">valu</a>e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Approval<small>(<a class="ext" href="https://msg.sender">msg.sender</a>, _spender, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Set allowance for other ad<a href="dress.htm">dress</a> and notify<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Allows `_spender` to spend no more than `_<a href="valu.htm">valu</a>e` <a href="token.htm">token</a>s in your behalf, and then ping the <a href="contract.htm">contract</a> about it<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _spender The ad<a href="dress.htm">dress</a> authorized to spend<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _<a href="valu.htm">valu</a>e the max amount they can spend<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _ex<a href="trad.htm">traD</a>ata some extra information to send to the approved <a href="contract.htm">contract</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function approveAndCall<small>(ad<a href="dress.htm">dress</a> _spender, uint256 _<a href="valu.htm">valu</a>e, bytes memory _ex<a href="trad.htm">traD</a>ata)</small><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returns <small>(bool success)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="token.htm">token</a>Recipient spender = <a href="token.htm">token</a>Recipient<small>(_spender)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if <small>(approve<small>(_spender, _<a href="valu.htm">valu</a>e)</small>)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a class="ext" href="https://spender.receiveApproval(msg.sender">spender.receiveApproval(msg.sender</a>, _<a href="valu.htm">valu</a>e, ad<a href="dress.htm">dress</a><small>(this)</small>, _ex<a href="trad.htm">traD</a>ata)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</small><br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Destroy <a href="token.htm">token</a>s<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Remove `_<a href="valu.htm">valu</a>e` <a href="token.htm">token</a>s from the system irreversibly<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _<a href="valu.htm">valu</a>e the amount of <a href="mone.htm">mone</a>y to burn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function burn<small>(uint256 _<a href="valu.htm">valu</a>e)</small> public returns <small>(bool success)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(balanceOf<small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small> >= _<a href="valu.htm">valu</a>e)</small>;&nbsp;&nbsp; // Check if the sender has enough<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small> -= _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Subtract from the sender<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; totalSupply -= _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Updates totalSupply<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Burn<small>(<a class="ext" href="https://msg.sender">msg.sender</a>, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /**<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Destroy <a href="token.htm">token</a>s from other account<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Remove `_<a href="valu.htm">valu</a>e` <a href="token.htm">token</a>s from the system irreversibly on behalf of `_from`.<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _from the ad<a href="dress.htm">dress</a> of the sender<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param _<a href="valu.htm">valu</a>e the amount of <a href="mone.htm">mone</a>y to burn<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/<br/>
&nbsp;&nbsp;&nbsp; function burnFrom<small>(ad<a href="dress.htm">dress</a> _from, uint256 _<a href="valu.htm">valu</a>e)</small> public returns <small>(bool success)</small> <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(balanceOf<small>[_from]</small> >= _<a href="valu.htm">valu</a>e)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Check if the targeted balance is enough<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(_<a href="valu.htm">valu</a>e &lt;= allowance<small>[_from]</small><small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small>)</small>;&nbsp;&nbsp;&nbsp;&nbsp;// Check allowance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[_from]</small> -= _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Subtract from the targeted balance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; allowance<small>[_from]</small><small>[<a class="ext" href="https://msg.sender">msg.sender</a>]</small> -= _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Subtract from the sender's allowance<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; totalSupply -= _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Update totalSupply<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Burn<small>(_from, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
}</small><br/>
<br/>
/******************************************/<br/>
/*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ADVANCED <a href="token.htm">TOKEN</a> STARTS HERE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; */<br/>
/******************************************/<br/>
<br/>
<a href="contract.htm">contract</a> MyAdvanced<a href="token.htm">Token</a> is <a href="own.htm">own</a>ed, <a href="token.htm">Token</a>ERC20 <small>{<br/>
<br/>
&nbsp;&nbsp;&nbsp; uint256 public <a href="sell.htm">sell</a><a href="pric.htm">Pric</a>e;<br/>
&nbsp;&nbsp;&nbsp; uint256 public <a href="buy.htm">buy</a><a href="pric.htm">Pric</a>e;<br/>
<br/>
&nbsp;&nbsp;&nbsp; mapping <small>(ad<a href="dress.htm">dress</a> => bool)</small> public frozenAccount;<br/>
<br/>
&nbsp;&nbsp;&nbsp; /* This generates a public event on the <a href="bloc.htm">bloc</a>kchain that will notify clients */<br/>
&nbsp;&nbsp;&nbsp; event FrozenFunds<small>(ad<a href="dress.htm">dress</a> target, bool frozen)</small>;<br/>
<br/>
&nbsp;&nbsp;&nbsp; /* Initializes <a href="contract.htm">contract</a> with initial supply <a href="token.htm">token</a>s to the <a href="creat.htm">creat</a>or of the <a href="contract.htm">contract</a> */<br/>
&nbsp;&nbsp;&nbsp; con<a href="struc.htm">struc</a>tor<small>(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint256 initialSupply,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string memory <a href="token.htm">token</a>Name,<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; string memory <a href="token.htm">token</a>Symbol<br/>
&nbsp;&nbsp;&nbsp; )</small> <a href="token.htm">Token</a>ERC20<small>(initialSupply, <a href="token.htm">token</a>Name, <a href="token.htm">token</a>Symbol)</small> public <small>{}</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /* Internal transfer, only can be called by this <a href="contract.htm">contract</a> */<br/>
&nbsp;&nbsp;&nbsp; function _transfer<small>(ad<a href="dress.htm">dress</a> _from, ad<a href="dress.htm">dress</a> _to, uint _<a href="valu.htm">valu</a>e)</small> internal <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require <small>(_to != ad<a href="dress.htm">dress</a><small>(0x0)</small>)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prevent transfer to 0x0 ad<a href="dress.htm">dress</a>.<a href="us.htm"> Us</a>e burn<small>()</small> instead<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require <small>(balanceOf<small>[_from]</small> >= _<a href="valu.htm">valu</a>e)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check if the sender has enough<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require <small>(balanceOf<small>[_to]</small> + _<a href="valu.htm">valu</a>e >= balanceOf<small>[_to]</small>)</small>;&nbsp;&nbsp;&nbsp;&nbsp;// Check for overflows<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(!frozenAccount<small>[_from]</small>)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check if sender is frozen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(!frozenAccount<small>[_to]</small>)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Check if recipient is frozen<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[_from]</small> -= _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Subtract from the sender<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[_to]</small> += _<a href="valu.htm">valu</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Add the same to the recipient<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Transfer<small>(_from, _to, _<a href="valu.htm">valu</a>e)</small>;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /// @notice <a href="creat.htm">Creat</a>e `mintedAmount` <a href="token.htm">token</a>s and send it to `target`<br/>
&nbsp;&nbsp;&nbsp; /// @param target Ad<a href="dress.htm">dress</a> to receive the <a href="token.htm">token</a>s<br/>
&nbsp;&nbsp;&nbsp; /// @param mintedAmount the amount of <a href="token.htm">token</a>s it will receive<br/>
&nbsp;&nbsp;&nbsp; function mint<a href="token.htm">Token</a><small>(ad<a href="dress.htm">dress</a> target, uint256 mintedAmount)</small> only<a href="own.htm">Own</a>er public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; balanceOf<small>[target]</small> += mintedAmount;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; totalSupply += mintedAmount;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Transfer<small>(ad<a href="dress.htm">dress</a><small>(0)</small>, ad<a href="dress.htm">dress</a><small>(this)</small>, mintedAmount)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit Transfer<small>(ad<a href="dress.htm">dress</a><small>(this)</small>, target, mintedAmount)</small>;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /// @notice `<a href="free.htm">free</a>ze? Prevent | Allow` `target` from sending &amp; receiving <a href="token.htm">token</a>s<br/>
&nbsp;&nbsp;&nbsp; /// @param target Ad<a href="dress.htm">dress</a> to be frozen<br/>
&nbsp;&nbsp;&nbsp; /// @param <a href="free.htm">free</a>ze either to <a href="free.htm">free</a>ze it or not<br/>
&nbsp;&nbsp;&nbsp; function <a href="free.htm">free</a>zeAccount<small>(ad<a href="dress.htm">dress</a> target, bool <a href="free.htm">free</a>ze)</small> only<a href="own.htm">Own</a>er public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; frozenAccount<small>[target]</small> = <a href="free.htm">free</a>ze;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; emit FrozenFunds<small>(target, <a href="free.htm">free</a>ze)</small>;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /// @notice Allow<a href="us.htm"> us</a>ers to <a href="buy.htm">buy</a> <a href="token.htm">token</a>s for `new<a href="buy.htm">Buy</a><a href="pric.htm">Pric</a>e` eth and <a href="sell.htm">sell</a> <a href="token.htm">token</a>s for `new<a href="sell.htm">Sell</a><a href="pric.htm">Pric</a>e` eth<br/>
&nbsp;&nbsp;&nbsp; /// @param new<a href="sell.htm">Sell</a><a href="pric.htm">Pric</a>e <a href="pric.htm">Pric</a>e the<a href="us.htm"> us</a>ers can <a href="sell.htm">sell</a> to the <a href="contract.htm">contract</a><br/>
&nbsp;&nbsp;&nbsp; /// @param new<a href="buy.htm">Buy</a><a href="pric.htm">Pric</a>e <a href="pric.htm">Pric</a>e<a href="us.htm"> us</a>ers can <a href="buy.htm">buy</a> from the <a href="contract.htm">contract</a><br/>
&nbsp;&nbsp;&nbsp; function set<a href="pric.htm">Pric</a>es<small>(uint256 new<a href="sell.htm">Sell</a><a href="pric.htm">Pric</a>e, uint256 new<a href="buy.htm">Buy</a><a href="pric.htm">Pric</a>e)</small> only<a href="own.htm">Own</a>er public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="sell.htm">sell</a><a href="pric.htm">Pric</a>e = new<a href="sell.htm">Sell</a><a href="pric.htm">Pric</a>e;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="buy.htm">buy</a><a href="pric.htm">Pric</a>e = new<a href="buy.htm">Buy</a><a href="pric.htm">Pric</a>e;<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /// @notice <a href="buy.htm">Buy</a> <a href="token.htm">token</a>s from <a href="contract.htm">contract</a> by sending ether<br/>
&nbsp;&nbsp;&nbsp; function <a href="buy.htm">buy</a><small>()</small> <a href="pay.htm">pay</a>able public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; uint amount = <a class="ext" href="https://msg.value">msg.value</a> / <a href="buy.htm">buy</a><a href="pric.htm">Pric</a>e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // calculates the amount<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _transfer<small>(ad<a href="dress.htm">dress</a><small>(this)</small>, <a class="ext" href="https://msg.sender">msg.sender</a>, amount)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // <a href="mak.htm">mak</a>es the transfers<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
<br/>
&nbsp;&nbsp;&nbsp; /// @notice <a href="sell.htm">Sell</a> `amount` <a href="token.htm">token</a>s to <a href="contract.htm">contract</a><br/>
&nbsp;&nbsp;&nbsp; /// @param amount amount of <a href="token.htm">token</a>s to be sold<br/>
&nbsp;&nbsp;&nbsp; function <a href="sell.htm">sell</a><small>(uint256 amount)</small> public <small>{<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ad<a href="dress.htm">dress</a> myAd<a href="dress.htm">dress</a> = ad<a href="dress.htm">dress</a><small>(this)</small>;<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; require<small>(<a class="ext" href="https://myAddress.balance">myAddress.balance</a> >= amount * <a href="sell.htm">sell</a><a href="pric.htm">Pric</a>e)</small>;&nbsp;&nbsp; // checks if the <a href="contract.htm">contract</a> has enough ether to <a href="buy.htm">buy</a><br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _transfer<small>(<a class="ext" href="https://msg.sender">msg.sender</a>, ad<a href="dress.htm">dress</a><small>(this)</small>, amount)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // <a href="mak.htm">mak</a>es the transfers<br/>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a class="ext" href="https://msg.sender.transfer(amount">msg.sender.transfer(amount</a> * <a href="sell.htm">sell</a><a href="pric.htm">Pric</a>e)</small>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// sends ether to the <a href="sell.htm">sell</a>er. It's important to do this last to avoid recursion attacks<br/>
&nbsp;&nbsp;&nbsp; }</small><br/>
}</small><br/>
}</small><br/>
<br/>
<br/>
<hr/><span class="date">2019-04-26:</span> <a class="ext" href="https://Medium.com/minimum-viable-canvas">Medium.com/minimum-viable-canvas</a><br/>
<br/>
<hr/><span class="date">2019-04-22:</span> <a class="ext" href="https://LeanStack.com">LeanStack.com</a><br/>
<br/>
<hr/><span class="date">2019-04-13:</span> <a class="ext" href="https://TheNextSystem.org/learn/stories/resident-owned-community">TheNextSystem.org/learn/stories/resident-owned-community</a><br/>
<br/>
<hr/><span class="date">2019-04-12:</span> <a href="play.htm">Play</a>ing with <a class="ext" href="https://Pact.Kadena.io">Pact.Kadena.io</a> <a href="contract.htm">contract</a>s.<br/>
</p>
<p class='footer'>
 Page generated from <a href=".txt/diary-2019-04">diary-2019-04</a> by <a href=".src/lens.el">lens.el</a>.</p>
</body>
</html>
